# Зеник подарував Марічці ділянку городу розміром m x n, поділену на клітинки розміром 1 на 1 метр.
#  У кожній клітинці Марічка посадила гарбузи, щоб дарувати їх залицальникам. Марічка почала садити гарбузи починаючи із верхньої лівої,
#  і при досягненні правої межі - розверталась і рухалась справа наліво, як вказано в прикладі для m x n, де m - кількість рядків, а n - кількість стовпців:
#
# 1 2 3 4
# 8 7 6 5
# 9 10 11 12
# 16 15 14 13
#
# Для садіння Марічка вирішила використати робота-садівника, який садить в кожну клітинку задану кількість зернят,
# які слід вказати як одномірний масив m x n. Якщо Марічка хоче посадити таку кількість гарбузів
#
# 1 2 3 4
# 5 6 7 8
# 9 10 11 12
# 13 14 15 16
#
# Тоді роботу необхідно подати на всід таку послідовність (маршрут робота не незмінним):
#
# 1 2 3 4 8 7 6 5 9 10 11 12 16 15 14 13
#
# Реалізуйте алгоритм, який отримає на вхід масив розміром m та n,
# в кожній клітинці якого знаходиться бажана кількість гарбузів та поверне одномірний масив,
# скільки зернин має висаджувати робот при руху згідно маршруту, вказаного в цій задчі (маршрут є незмінним)
#
# Для перевірки виконання роботи реалізованого алгоритму слід використати бібліотеку `unittest` .
# Ваш тести мають перевірити роботу алгоритму при значеннях m == n == 5, m =2, n =4, n = 1, m = 6
def marichka_method(quantity_field):
    if not quantity_field or len(quantity_field) == 0:
        return []
    rows = len(quantity_field)
    cols = len(quantity_field[0])
    result = []
    for i in range(0, rows):
        for j in range(0, cols):
            if i % 2 == 0:
                result.append(quantity_field[i][j])
            else:
                result.append(quantity_field[i][cols - j - 1])
    return result


# Дані два масиви цілих чисел `nums1` і `nums2`, де `nums1` є підмасивом `nums2`, якщо всі елементи `nums1` знаходяться в `nums2`, в тому ж порядку.
# Напишіть функцію `is_subarray`, яка приймає два масиви цілих чисел та повертає `True`, якщо `nums1` є підмасивом `nums2`, та `False` в іншому випадку.
# Приклади
# Вхідні дані: nums1 = 1,2,3, nums2 = 1,2,3,4
# Результат: True
# Пояснення: Всі елементи nums1 ([1,2,3]) присутні в nums2.
# Вхідні дані: nums1 = [2,4], nums2 = [1,2,3,4]
# Результат: False
# Пояснення: Елементи nums1 ([2,4]) не знаходяться в тому ж порядку в nums2.
# Вхідні дані: nums1 = [1,3,5], nums2 = [1,2,3,4,5]
# Результат: True
# Пояснення: Елементи nums1 ([1,3,5]) присутні в nums2.
# Для перевірки виконання роботи реалізованого алгоритму слід використати бібліотеку `unittest` та перевірити роботу вашої функції на прикладах, наведених вище
def is_subarray(nums1, nums2):
    if not nums2 or not nums1:
        return False

    index = 0
    for i in range(len(nums2)):
        if index == len(nums1) - 1:
            return True
        else:
            if nums1[index] == nums2[i]:
                index += 1
    return False
